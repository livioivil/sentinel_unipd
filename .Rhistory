load(filesRdata[i_fl])
dati$Plate=i_fl
D=rbind(D,dati)
}
kable(table(D$Compound,D$Plate,exclude = NULL) )
D=D[!is.na(D$Compound),]
tbs=table(Row=D$Row,Column=D$Column,Plate=D$Plate)
par(mfrow=c(2,2))
for(i in 1:4){
cat("
__________Plate ",i,"__________
")
print(kable(tbs[,,i]))
# #  print(kable(prop.table(tbs[,,i])))
# heatmap(tbs[,,i],Rowv = NA,Colv = NA,main=paste0("Plate ",i))
}
tbs2=as.data.frame.table(tbs)
pp=lapply(1:4,function(i){
ggplot(data=tbs2[tbs2$Plate==i,], aes(Row, Column, fill= Freq)) +
geom_tile()+ggtitle(paste0("Plate ",i))
})
library(gridExtra)
grid.arrange(pp[[1]],pp[[2]],pp[[3]],pp[[4]], nrow = 2)
tab=table(D$Group,D$Plate)
kable(tab)
cat("NOTE: Category 0:None is omitted in the following")
D=D[D$Group!="0:None",]
D=D[!is.na(D$Group),]
tab=table(D$Group,D$Plate)
tab=prop.table(tab,margin = 2)
kable(tab,digits = 3)
d_tab=as.data.frame.table(tab)
names(d_tab)=c("Group","Plate","Prop")
g <- ggplot(d_tab, aes(y=Plate))
g + geom_bar(aes(fill = Group,weight = Prop))+xlab("Proportion")+
scale_fill_manual(values=cbPalette)
tab=table(D$Group,D$Plate)
kable(tab)
cat("NOTE: Category 0:None is omitted in the following")
D=D[D$Group!="0:None",]
D=D[!is.na(D$Group),]
D$Group=factor(D$Group)
tab=table(D$Group,D$Plate)
tab=prop.table(tab,margin = 2)
kable(tab,digits = 3)
d_tab=as.data.frame.table(tab)
names(d_tab)=c("Group","Plate","Prop")
table(d_tab$Group)
g <- ggplot(d_tab, aes(y=Plate))
g + geom_bar(aes(fill = Group,weight = Prop))+xlab("Proportion")+
scale_fill_manual(values=cbPalette)
out=rbind(Nuclei_length=summary(D$Nuclei_length) ,
Nuclei_intensity=summary(D$Nuclei_intensity) ,
Nuclei_Ratio_W_L=summary(D$Nuclei_Ratio_W_L)
)
out=cbind(out,c(sd(D$Nuclei_length) ,
sd(D$Nuclei_intensity) ,
sd(D$Nuclei_Ratio_W_L) )
)
kable(out)
p <- ggplot(D, aes(group=Plate, x=Plate,y=Nuclei_length,fill=2)) +
geom_boxplot()+ggtitle("Nuclei Length")+ theme(legend.position = "none")
p
p
p <- ggplot(D, aes(group=Plate, x=Plate,y=Nuclei_intensity,fill=2)) +
geom_boxplot()+ggtitle("Nuclei Intensity") + theme(legend.position = "none")
p
p <- ggplot(D, aes(group=Plate, x=Plate,y=Nuclei_Ratio_W_L,fill=2)) +
geom_boxplot()+ggtitle("Nuclei Ratio Width/Length") + theme(legend.position = "none")
p <- ggplot(D, aes(group=Plate, x=Plate,y=Nuclei_Ratio_W_L,fill=2)) +
geom_boxplot()+ggtitle("Nuclei Ratio Width/Length") + theme(legend.position = "none")
p
View(out)
View(D)
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Condition=="Control:0",c("Group","Row","Column","Cond","Plate","Counts",par_i),]
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("Group","Row","Column","Cond","Plate","Counts",par_i),]
for(i_fl in 1:length(filesRdata)){
load(filesRdata[i_fl])
dati$Plate=i_fl
D=rbind(D,dati)
}
for(i_fl in 1:length(filesRdata)){
load(filesRdata[i_fl])
dati$Plate=i_fl
D=rbind(D,dati)
}
D$Condition=apply(cbind(as.character(D$Compound),
as.character(D$Concentration)),
1,function(x) paste(x,collapse = ":"))
D=c()
D=c()
for(i_fl in 1:length(filesRdata)){
load(filesRdata[i_fl])
dati$Plate=i_fl
D=rbind(D,dati)
}
D$Condition=apply(cbind(as.character(D$Compound),
as.character(D$Concentration)),
1,function(x) paste(x,collapse = ":"))
D$Cond=factor(D$Condition)
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("Group","Row","Column","Cond","Plate","Counts",par_i),]
View(D)
par_i="Nuclei_intensity"
source("~/github/sentinel_unipd/functions.R")
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("Group","Row","Column","Cond","Plate","Counts",par_i),]
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("Group","Row","Column","Cond","Plate",par_i),]
DD$Plate=as.numeric(DD$Plate)
p=ggplot(data=DD) +
aes_string(y="Plate", x=par_i, group = "interaction(Plate,Group)") +
ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
p=ggplot(data=DD) +
aes(y="Plate", x=par_i, group = "interaction(Plate,Group)") +
ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
print(p)
p=ggplot(data=DD) +
aes(y="Plate", x=Nuclei_intensity, group = "interaction(Plate,Group)") +
ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
print(p)
p=ggplot(data=DD) +
aes(y="Plate", x=Nuclei_intensity, group = interaction(Plate,Group)) +
ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
print(p)
table(DD$Group)
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("Group","Row","Column","Cond","Plate",par_i)]
DD <- DD[D$Group!="0:None",]
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("Group","Row","Column","Cond","Plate",par_i)]
DD <- DD[DD$Group!="0:None",]
DD$Plate=as.numeric(DD$Plate)
p=ggplot(data=DD) +
aes(y="Plate", x=Nuclei_intensity, group = interaction(Plate,Group)) +
ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
print(p)
print(p)
table(DD$Plate)
p=ggplot(data=DD) +
aes(y=Plate, x=Nuclei_intensity, group = interaction(Plate,Group)) +
ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
print(p)
D$ID=apply(cbind(as.character(D$Row),
as.character(D$column)),
1,function(x) paste(x,collapse = ":"))
D$ID=factor(D$ID)
D$ID=apply(cbind(as.character(D$Row),
as.character(D$Column)),
1,function(x) paste(x,collapse = ":"))
D$ID=factor(D$ID)
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_length,y=ID,fill=2)) +
+ theme(legend.position = "none")
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_length,y=ID,fill=2)) +
theme(legend.position = "none")
p
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_intensity,y=ID,fill=2)) +
theme(legend.position = "none")
p
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("ID","Group","Row","Column","Cond","Plate",par_i)]
DD <- DD[DD$Group!="0:None",]
DD$Plate=as.numeric(DD$Plate)
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_intensity,y=ID,fill=2)) +
theme(legend.position = "none")
p
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_intensity,y=ID,fill=2)) +
theme(legend.position = "none")+geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_intensity,y=ID,fill=2)) +
theme(legend.position = "none")+geom_boxplot()+geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_intensity,y=interaction(Plate,ID),fill=2)) +
theme(legend.position = "none")+geom_boxplot()#+
#    geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_intensity,
y=interaction(ID,Plate),fill=Plate)) +
theme(legend.position = "none")+geom_boxplot()#+
#    geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
DD$Plate=as.factor(as.numeric(DD$Plate))
# p=ggplot(data=DD) +
#   aes(y=Plate, x=Nuclei_intensity, group = interaction(Plate,Group)) +
#   ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
#   scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
# print(p)
#
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=Nuclei_intensity,
y=interaction(ID,Plate),fill=Plate)) +
theme(legend.position = "none")+geom_boxplot()#+
#    geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
source("~/github/sentinel_unipd/functions.R")
# p=ggplot(data=DD) +
#   aes(y=Plate, x=Nuclei_intensity, group = interaction(Plate,Group)) +
#   ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
#   scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
# print(p)
#
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=par_i,
y=interaction(ID,Plate),fill=Plate)) +
theme(legend.position = "none")+geom_boxplot()+ggtitle(par_i)
#    geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
aes_string()
aes_string
# p=ggplot(data=DD) +
#   aes(y=Plate, x=Nuclei_intensity, group = interaction(Plate,Group)) +
#   ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
#   scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
# print(p)
#
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=.data[[par_i]],
y=interaction(ID,Plate),fill=Plate)) +
theme(legend.position = "none")+geom_boxplot()+ggtitle(par_i)
#    geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
explore_control_group_plate_params<- function(D,par_i){
# library(data.table)
# DD <- data.table(dati[,c("Population","Shape","Layer_ID",par_i)])
DD <- D[D$Cond=="Control:0",c("ID","Group","Row","Column","Cond","Plate",par_i)]
DD <- DD[DD$Group!="0:None",]
DD$Plate=as.factor(as.numeric(DD$Plate))
# p=ggplot(data=DD) +
#   aes(y=Plate, x=Nuclei_intensity, group = interaction(Plate,Group)) +
#   ylab("Plate")+geom_point(aes(color =  Group, group=interaction(Plate,Group)),size=3)+
#   scale_x_continuous(trans='log10')+scale_colour_manual(values=cbPalette)
# print(p)
#
p <- ggplot(DD, aes(group=interaction(Plate,ID), x=.data[[par_i]],
y=interaction(ID,Plate),fill=Plate)) +
theme(legend.position = "none")+geom_boxplot()+ggtitle(par_i)
#    geom_point(aes(color =  Plate, group=interaction(Plate,ID)),size=3)
p
}
source("~/github/sentinel_unipd/functions.R")
explore_control_group_plate_params(D,par_i = "Nuclei_length")
explore_control_group_plate_params(D,par_i = "Nuclei_Ratio_W_L")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE)
# library(r41sqrt10)
source('utils.R')
source("functions.R")
library(knitr)
#ls()
files=dir(pattern="xlsx$",params$PathData,full.names = TRUE)
filesRdata=gsub("xlsx","Rdata",files)
eval_raw=eval(parse(text=params$eval_raw))
if(eval_raw){
out=lapply(files,import_data_add_group,params$tab_txt)
D <- do.call("rbind", out)
rm(out)
D=D[D$Group!="0:None",]
D=D[D$Compound!="DMEM",] #"0:None"
D$Group=factor(D$Group)
D$Compound=factor(D$Compound)
D$Compound=relevel(D$Compound,"Control")
# contrasts(D$Compound)
D$Plate=factor(D$Plate)
D$Concentration=factor(D$Concentration)
# D$Condition=factor(D$Condition)
D$Column=factor(D$Column)
D$Row=factor(D$Row)
contrasts(D$Plate)=contr.sum(4)
contrasts(D$Column)=contr.sum(nlevels(D$Column))
contrasts(D$Row)=contr.sum(nlevels(D$Row))
save(D, file= "datiD.Rdata")
} else   load("datiD.Rdata")
# plot_row_data("13102021_ID429_Zm_P14_Plate1_SingleData.Rdata")
# plot_row_data("13102021_ID429_Zm_P17_Plate2_SingleData.Rdata")
# plot_row_data("13102021_ID429_Zm_P16_Plate3_SingleData.Rdata")
# plot_row_data("13102021_ID429_Zm_P20_Plate4_SingleData.Rdata")
Dall=c()
for(i_fl in 1:length(filesRdata)){
load(filesRdata[i_fl])
dati$Plate=i_fl
Dall=rbind(Dall,dati)
}
Dall$Condition=apply(cbind(as.character(Dall$Compound),
as.character(Dall$Concentration)),
1,function(x) paste(x,collapse = ":"))
Dall$Cond=factor(Dall$Condition)
Dall$ID=apply(cbind(as.character(Dall$Row),
as.character(Dall$Column)),
1,function(x) paste(x,collapse = ":"))
Dall$ID=factor(Dall$ID)
kable(table(Dall$Compound,Dall$Plate,exclude = NULL) )
Dall=Dall[!is.na(Dall$Compound),]
tbs=table(Row=Dall$Row,Column=Dall$Column,Plate=Dall$Plate)
par(mfrow=c(2,2))
for(i in 1:4){
cat("
__________Plate ",i,"__________
")
print(kable(tbs[,,i]))
# #  print(kable(prop.table(tbs[,,i])))
# heatmap(tbs[,,i],Rowv = NA,Colv = NA,main=paste0("Plate ",i))
}
tbs2=as.data.frame.table(tbs)
pp=lapply(1:4,function(i){
ggplot(data=tbs2[tbs2$Plate==i,], aes(Row, Column, fill= Freq)) +
geom_tile()+ggtitle(paste0("Plate ",i))
})
library(gridExtra)
grid.arrange(pp[[1]],pp[[2]],pp[[3]],pp[[4]], nrow = 2)
tab=table(Dall$Group,Dall$Plate)
kable(tab)
cat("NOTE: Category 0:None is omitted in the following")
Dall=Dall[Dall$Group!="0:None",]
Dall=Dall[!is.na(Dall$Group),]
Dall$Group=factor(Dall$Group)
tab=table(Dall$Group,Dall$Plate)
tab=prop.table(tab,margin = 2)
kable(tab,digits = 3)
d_tab=as.data.frame.table(tab)
names(d_tab)=c("Group","Plate","Prop")
g <- ggplot(d_tab, aes(y=Plate))
g + geom_bar(aes(fill = Group,weight = Prop))+xlab("Proportion")+
scale_fill_manual(values=cbPalette)
out=rbind(Nuclei_length=summary(Dall$Nuclei_length) ,
Nuclei_intensity=summary(Dall$Nuclei_intensity) ,
Nuclei_Ratio_W_L=summary(Dall$Nuclei_Ratio_W_L)
)
out=cbind(out,c(sd(Dall$Nuclei_length) ,
sd(Dall$Nuclei_intensity) ,
sd(Dall$Nuclei_Ratio_W_L) )
)
kable(out)
p <- ggplot(Dall, aes(group=Plate, x=Plate,y=Nuclei_length,fill=2)) +
geom_boxplot()+ggtitle("Nuclei Length")+ theme(legend.position = "none")
p
p <- ggplot(Dall, aes(group=Plate, x=Plate,y=Nuclei_intensity,fill=2)) +
geom_boxplot()+ggtitle("Nuclei Intensity") + theme(legend.position = "none")
p
p <- ggplot(Dall, aes(group=Plate, x=Plate,y=Nuclei_Ratio_W_L,fill=2)) +
geom_boxplot()+ggtitle("Nuclei Ratio Width/Length") + theme(legend.position = "none")
p
tab=table(Dall$Cond,Dall$Group)
kable(tab)
cat("NOTE: Category 0:None is omitted in the following")
Dall=Dall[Dall$Group!="0:None",]
Dall=Dall[!is.na(Dall$Group),]
Dall$Group=factor(Dall$Group)
tab=table(Dall$Group,Dall$Cond)
tab=prop.table(tab,margin = 2)
kable(tab,digits = 3)
d_tab=as.data.frame.table(tab)
names(d_tab)=c("Group","Condition","Prop")
g <- ggplot(d_tab, aes(y=Condition))
g + geom_bar(aes(fill = Group,weight = Prop))+xlab("Proportion")+
scale_fill_manual(values=cbPalette)
explore_control_group_plate_params(Dall,par_i = "Nuclei_intensity")
explore_control_group_plate_params(Dall,par_i = "Nuclei_length")
explore_control_group_plate_params(Dall,par_i = "Nuclei_Ratio_W_L")
load("datiD.Rdata")
D$Condition=apply(cbind(as.character(D$Compound),
as.character(D$Concentration)),
1,function(x) paste(x,collapse = ":"))
D$Cond=factor(D$Condition)
explore_control_group_plate(D)
Dall$Group0=Dall$Group
table(Dall[Dall$Compound=="Control","Group"],exclude = NULL)
my_plot1(Dall[Dall$Compound=="Control",])
# Dall$Group0=(Dall$Group=="0:None")
# Dall$Group0=factor(Dall$Group0)
# levels(Dall$Group0)=c("Grp 1-6","NO Grp")
#
# my_plot1(Dall)
#my_plot2(Dall)
knitr::opts_chunk$set(echo = FALSE,warning = FALSE)
load(params$file_data)
source("functions.R")
source("functions.R")
library(ggplot2)
library(data.table)
library(sjPlot)
library(ggplot2)
theme_set(theme_sjplot())
suppressPackageStartupMessages(library(dplyr))
load("C:/Users/livio/OneDrive/Documenti/github/sentinel_unipd/datiD.Rdata")
require("MASS")
require(multcomp)
D=data.frame(D)
D$Condition=apply(cbind(as.character(D$Compound),
as.character(D$Concentration)),
1,function(x) paste(x,collapse = ":"))
D$Cond=factor(D$Condition)
D$Compound=factor(D$Compound)
D$Grp=D$Group
D$Cond=relevel(D$Cond,"Control:0")
D$Cond=factor(D$Cond)
contrasts(D$Plate)<- contr.sum(4)
# table(D$Cond,D$Group,D$Plate)
D=D[D$Plate!=levels(D$Plate)[1],]
mod= glm.nb(Counts~Plate+Cond*Grp,data=D)
# mod=glmer.nb(Counts~Condition*Group3+(1|Column),data=D[D$Plate==1,])
ngrps=nlevels(D$Grp)
nconds=23#*ngrps
base=cbind(matrix(0,nconds,length(unique(D$Plate))),diag(nconds))
temp=rbind(
cbind(base,matrix(0,nconds,ngrps-1+nconds*5)), #gr=1
cbind(base,matrix(0,nconds,ngrps-1),diag(nconds),matrix(0,nconds,nconds*4)), #gr=2
cbind(base,matrix(0,nconds,ngrps-1+nconds),diag(nconds),matrix(0,nconds,nconds*3)),#gr=3
cbind(base,matrix(0,nconds,ngrps-1+nconds*2),diag(nconds),matrix(0,nconds,nconds*2)),#gr=4
cbind(base,matrix(0,nconds,ngrps-1+nconds*3),diag(nconds),matrix(0,nconds,nconds*1)),#gr=5
cbind(base,matrix(0,nconds,ngrps-1+nconds*4),diag(nconds),matrix(0,nconds,nconds*0)))#,
# cbind(matrix(0,nconds,ngrps+nconds*6),diag(nconds),matrix(0,nconds,nconds*0)))#gr=6
names(coef(mod))[-c(1:nplates,(24:28)+nplates)]
nplates=4
names(coef(mod))[-c(1:nplates,(24:28)+nplates)]
names(coef(mod))
nplates=3
names(coef(mod))[-c(1:nplates,(24:28)+nplates)]
contr_mat=temp
rownames(contr_mat)=
names(coef(mod))[-c(1:nplates,(24:28)+nplates)]
rownames(contr_mat)[1:23]=paste0(rownames(contr_mat)[1:23],":Grp1:G0")
modc=glht(mod,contr_mat)
modc_mcp=summary(modc)
M=rbind(
c(1,1,1,rep(0,20)),
c(rep(0,3),rep(1,5),rep(0,15)),
c(rep(0,8),rep(1,5),rep(0,10)),
c(rep(0,13),rep(1,5),rep(0,5)),
c(rep(0,18),rep(1,5))
)
riducente=  kronecker(diag(1, 6), M)
contr_mat0=riducente%*%contr_mat
rownames(contr_mat0)=paste(sep="_",rep(levels(D$Compound)[-1],6),rep(levels(D$Group),each=5))
contr_mat0
M
contr_mat0
mod
coefficients(mod)
M
diag(1, 6)
contr_mat
riducente
coefficients(modc)
riducente=  kronecker(diag(1, 6), M)
contr_mat0=riducente%*%contr_mat
rownames(contr_mat0)=paste(sep="_",rep(levels(D$Compound)[-1],6),rep(levels(D$Group),each=5))
modc0=glht(mod,contr_mat0)
modc0_mcp=summary(modc0)
modc0_mcp
contr_mat
rownames(contr_mat)
contrasts(D$Plate)<- contr.sum
levels(D$Plate)
D=D[D$Plate!=levels(D$Plate)[leaveout],]
leaveout=1
D=D[D$Plate!=levels(D$Plate)[leaveout],]
contrasts(D$Plate)<- contr.sum
contrasts(D$Plate)
D$Plate=factor(D$Plate)
contrasts(D$Plate)<- contr.sum
D$Plate=factor(D$Plate)
contrasts(D$Plate)
contrasts(D$Plate)<- contr.sum
contrasts(D$Plate)
rmarkdown::render("analysis_parametric_Leave1PlateOut_1.Rmd",
params = list(leaveout="1"),
output_file = paste0(PathScript,"/Output_1.html"))
rmarkdown::render("analysis_parametric_Leave1PlateOut.Rmd",
params = list(leaveout="1"),
output_file = paste0(PathScript,"/Output_1.html"))
PathScript <- '.'
PathAnalisi <- '.'
PathData <- 'G:\\My Drive\\lavorincorso\\brain_perm\\pfas_bos_taurus/data/'
# gli estremi degli intervalli sempre separati di " - " (occhio agli spazi prima e dopo il -)
# usare Inf e -Inf (senza spazio il - prima di Inf);
#    per esempio: >32 deve essere indicato come "32 - Inf" e
#                 <14 come "-Inf - 14"
tab_txt= "ID,Group      , Nuclei - Nucleus Length [µm],Nuclei - Intensity Nucleus HOECHST 33342 Mean,Nuclei - Nucleus Ratio Width to Length \n
1, G0          , 9 - 27, 300 - 900, 0.2 - 0.9\n
2, S           , 9 - 27, 900 - 1600, 0.2 - 0.9\n
3, G2 + early M, 12 - 27, 1600 - 3000, 0.2 - 0.9\n
4, M           , 8 - 12, 1600 - 3000, 0.2 - 0.9\n
5, Large       , 27 - Inf , 300 - 3000, 0.2 - 0.9\n
6, Small       , -Inf - 8  , 300 - 3000, 0.2 - 0.9\n
6, Small       , 8 - 9  , 300 - 1600, 0.2 - 0.9"
setwd(PathScript)
rmarkdown::render("analysis_parametric_Leave1PlateOut.Rmd",
params = list(leaveout="1"),
output_file = paste0(PathScript,"/Output_1.html"))
rmarkdown::render("analysis_parametric_Leave1PlateOut.Rmd",
params = list(leaveout="2"),
output_file = paste0(PathScript,"/Output_2.html"))
rmarkdown::render("analysis_parametric_Leave1PlateOut.Rmd",
params = list(leaveout="3"),
output_file = paste0(PathScript,"/Output_3.html"))
rmarkdown::render("analysis_parametric_Leave1PlateOut.Rmd",
params = list(leaveout="4"),
output_file = paste0(PathScript,"/Output_4.html"))
D[D$Concentration==100,]
D[D$Concentration==0,]
