dataset <- dataset[dataset$Group != "0:None",]
dataset$Cond <- factor(dataset$Condition)
dataset$Compound <- factor(dataset$Compound)
dataset$Grp <- dataset$Group
dataset$Cond <- relevel(dataset$Cond, 'Control:0')
dataset$Cond <- factor(dataset$Cond)
plates=unique(dataset$Plate)
nplates=length(plates)
res=lapply(plates, function(plt){
model <- glm.nb(Counts ~ Cond * Grp, data = dataset[dataset$Plate==plt,])
model_summary <- summary(model)
as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
})
res=as.data.frame(res)
#fisher_stat=rowSums(-2*log(res[,3*(1:nplates)]))
#fisher_ps=1-pchisq(fisher_stat,2*nplates)
liptak_stat=rowSums(res[,3*(1:nplates)-1,drop=FALSE])/sqrt(nplates)
liptak_ps=(1-pnorm(abs(liptak_stat)))*2
p.adj=p.adjust(liptak_ps,"holm")
mean_coeff=rowMeans(res[,3*(1:nplates)-21,drop=FALSE])
smry=data.frame(mean_coeff=mean_coeff,
Z.value=liptak_stat,
p.value=make_up_res(liptak_ps),
adj.p.value=make_up_res(p.adj),
get_stars(p.adj)
)
names(smry)[5]=""
print("Coefficients of the GLM model (Averaged over plates) and Liptak-Stouffer combinations of p-values:")
print(smry,digits=4)
coefficients=as.matrix(smry)
coefficients_json <- toJSON(split(coefficients, row(coefficients)))
return(coefficients_json)
}
ids <- c(564, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
dataset <- download_and_load_csv(api_url, token, save_path)
coefficients_json <- run_glm_model(dataset)
ids <- c(564)#, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
dataset <- download_and_load_csv(api_url, token, save_path)
coefficients_json <- run_glm_model(dataset)
ids <- c(565)#, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
dataset <- download_and_load_csv(api_url, token, save_path)
coefficients_json <- run_glm_model(dataset)
debug(run_glm_model)
dataset <- dataset[dataset$Group != "0:None",]
run_glm_model <- function(dataset) {
dataset <- dataset[dataset$Group != "0:None",]
dataset$Cond <- factor(dataset$Condition)
dataset$Compound <- factor(dataset$Compound)
dataset$Grp <- dataset$Group
dataset$Cond <- relevel(dataset$Cond, 'Control:0')
dataset$Cond <- factor(dataset$Cond)
plates=unique(dataset$Plate)
nplates=length(plates)
res=lapply(plates, function(plt){
model <- glm.nb(Counts ~ Cond * Grp, data = dataset[dataset$Plate==plt,])
model_summary <- summary(model)
as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
})
res=as.data.frame(res)
#fisher_stat=rowSums(-2*log(res[,3*(1:nplates)]))
#fisher_ps=1-pchisq(fisher_stat,2*nplates)
liptak_stat=rowSums(res[,3*(1:nplates)-1,drop=FALSE])/sqrt(nplates)
liptak_ps=(1-pnorm(abs(liptak_stat)))*2
p.adj=p.adjust(liptak_ps,"holm")
mean_coeff=rowMeans(res[,3*(1:nplates)-21,drop=FALSE])
smry=data.frame(mean_coeff=mean_coeff,
Z.value=liptak_stat,
p.value=make_up_res(liptak_ps),
adj.p.value=make_up_res(p.adj),
get_stars(p.adj)
)
names(smry)[5]=""
print("Coefficients of the GLM model (Averaged over plates) and Liptak-Stouffer combinations of p-values:")
print(smry,digits=4)
coefficients=as.matrix(smry)
coefficients_json <- toJSON(split(coefficients, row(coefficients)))
return(coefficients_json)
}
ids <- c(565)#, 564, 565, 566, 567) #c(560, 561, 562, 563)
ids <- c(565, 564, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
dataset <- download_and_load_csv(api_url, token, save_path)
coefficients_json <- run_glm_model(dataset)
debug(run_glm_model)
coefficients_json <- run_glm_model(dataset)
table(dataset$Cond)
plates=unique(dataset$Plate)
nplates=length(plates)
model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset[dataset$Plate==plt,])
model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset)
model_summary <- summary(model)
as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
#model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset)
#model_summary <- summary(model)
#as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
as.data.frame(model_summary$coefficients)[,c(4)]
#model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset)
#model_summary <- summary(model)
#as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
round(as.data.frame(model_summary$coefficients)[,c(4)],4)
#model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset)
#model_summary <- summary(model)
#as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
round(as.data.frame(model_summary$coefficients)[,c(1,4)],4)
ids <- c(564, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
dataset <- download_and_load_csv(api_url, token, save_path)
ids <- c(564, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
dataset <- download_and_load_csv(api_url, token, save_path)
coefficients_json <- run_glm_model(dataset)
model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset)
model_summary <- summary(model)
as.data.frame(model_summary$coefficients)[,c(1,4)]
round(  as.data.frame(model_summary$coefficients)[,c(1,4)],4)
library(httr)  # Per inviare richieste HTTP
library(readr) # Per leggere il CSV
library(MASS)  # Per glm.nb
library(jsonlite)  # Per convertire in JSON
download_and_load_csv <- function(api_url, token, save_path) {
response <- GET(
api_url,
add_headers(Authorization = paste("Bearer", token))
)
if (status_code(response) == 200) {
raw_data <- content(response, "raw")
writeBin(raw_data, save_path)
dataset <- read.csv(save_path, sep = ";")
return(dataset)
} else {
stop("Errore nella chiamata all'API: ", status_code(response))
}
}
###### questa forse va messa in qualche file utils? non fa altro che aggiungere gli asterischi sui p significativi
get_stars <- function(ps){
stars=rep("",length(ps))
stars[ps<=.05]=paste0(stars[ps<=.05],"*")
stars[ps<=.01]=paste0(stars[ps<=.01],"*")
stars[ps<=.001]=paste0(stars[ps<=.001],"*")
stars
}
##############
make_up_res <- function(ps){
ps=sprintf("%.4f", round(ps,4))
ps[ps<.001]="<0.001"
ps
}
library(httr)  # Per inviare richieste HTTP
library(readr) # Per leggere il CSV
library(MASS)  # Per glm.nb
library(jsonlite)  # Per convertire in JSON
download_and_load_csv <- function(api_url, token, save_path) {
response <- GET(
api_url,
add_headers(Authorization = paste("Bearer", token))
)
if (status_code(response) == 200) {
raw_data <- content(response, "raw")
writeBin(raw_data, save_path)
dataset <- read.csv(save_path, sep = ";")
return(dataset)
} else {
stop("Errore nella chiamata all'API: ", status_code(response))
}
}
###### questa forse va messa in qualche file utils? non fa altro che aggiungere gli asterischi sui p significativi
get_stars <- function(ps){
stars=rep("",length(ps))
stars[ps<=.05]=paste0(stars[ps<=.05],"*")
stars[ps<=.01]=paste0(stars[ps<=.01],"*")
stars[ps<=.001]=paste0(stars[ps<=.001],"*")
stars
}
##############
make_up_res <- function(ps){
ps=sprintf("%.4f", round(ps,4))
ps[ps<.001]="<0.001"
ps
}
run_glm_model <- function(dataset) {
dataset <- dataset[dataset$Group != "0:None",]
dataset$Cond <- factor(dataset$Condition)
dataset$Compound <- factor(dataset$Compound)
dataset$Grp <- dataset$Group
dataset$Cond <- relevel(dataset$Cond, 'Control:0')
dataset$Cond <- factor(dataset$Cond)
plates=unique(dataset$Plate)
nplates=length(plates)
model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset)
model_summary <- summary(model)
print(round(as.data.frame(model_summary$coefficients)[,c(1,4)],4))
round(as.data.frame(model_summary$coefficients)[,c(4)],4)
res=lapply(plates, function(plt){
model <- glm.nb(Counts ~ Cond * Grp, data = dataset[dataset$Plate==plt,])
model_summary <- summary(model)
as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
})
res=as.data.frame(res)
#fisher_stat=rowSums(-2*log(res[,3*(1:nplates)]))
#fisher_ps=1-pchisq(fisher_stat,2*nplates)
liptak_stat=rowSums(res[,3*(1:nplates)-1,drop=FALSE])/sqrt(nplates)
liptak_ps=(1-pnorm(abs(liptak_stat)))*2
p.adj=p.adjust(liptak_ps,"holm")
mean_coeff=rowMeans(res[,3*(1:nplates)-21,drop=FALSE])
smry=data.frame(mean_coeff=mean_coeff,
Z.value=liptak_stat,
p.value=make_up_res(liptak_ps),
adj.p.value=make_up_res(p.adj),
get_stars(p.adj)
)
names(smry)[5]=""
print("Coefficients of the GLM model (Averaged over plates) and Liptak-Stouffer combinations of p-values:")
print(smry,digits=4)
coefficients=as.matrix(smry)
coefficients_json <- toJSON(split(coefficients, row(coefficients)))
return(coefficients_json)
}
ids <- c(307, 308, 309, 310)#cervello bovino# # fegato delfino: c(564, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
dataset <- download_and_load_csv(api_url, token, save_path)
coefficients_json <- run_glm_model(dataset)
knitr::opts_chunk$set(echo = FALSE,warning = FALSE)
# library(r41sqrt10)
source('utils.R')
setwd("~/github")
setwd("~/github/sentinel_unipd")
# library(r41sqrt10)
source('utils.R')
source('utils.R')
source("functions.R")
library(knitr)
#ls()
files=dir(pattern="xlsx$",params$PathData,full.names = TRUE)
filesRdata=gsub("xlsx","Rdata",files)
files
params$PathData
#ls()
files=dir(pattern="xlsx$",params$PathData,full.names = TRUE)
files
params$PathData
dir(params$PathData)
#ls()
files=dir(pattern="xlsx$",params$PathData,full.names = TRUE)
files
filesRdata=gsub("xlsx","Rdata",files)
eval_raw=eval(parse(text=params$eval_raw))
if(eval_raw){
out=lapply(files,import_data_add_group,params$tab_txt)
D <- do.call("rbind", out)
rm(out)
D=D[D$Group!="0:None",]
D=D[D$Compound!="DMEM",] #"0:None"
D$Group=factor(D$Group)
D$Compound=factor(D$Compound)
D$Compound=relevel(D$Compound,"Control")
# contrasts(D$Compound)
D$Plate=factor(D$Plate)
D$Concentration=factor(D$Concentration)
# D$Condition=factor(D$Condition)
D$Column=factor(D$Column)
D$Row=factor(D$Row)
contrasts(D$Plate)=contr.sum(4)
contrasts(D$Column)=contr.sum(nlevels(D$Column))
contrasts(D$Row)=contr.sum(nlevels(D$Row))
save(D, file= "datiD.Rdata")
} else   load("datiD.Rdata")
eval_raw
out=lapply(files,import_data_add_group,params$tab_txt)
params$tab_txt
import_data_add_group
dir(pa)
debug(import_data_add_group)
out=lapply(files,import_data_add_group,params$tab_txt)
out=lapply(files,import_data_add_group,params$tab_txt)
out=lapply(files,import_data_add_group,params$tab_txt)
out=lapply(files,import_data_add_group,params$tab_txt)
out=lapply(files,import_data_add_group,params$tab_txt)
out=lapply(files,import_data_add_group,params$tab_txt)
out=lapply(files,import_data_add_group,params$tab_txt)
names(dati)
dati <- read_csv2(filename,show_col_types = FALSE)
View(dati)
files
out=lapply(files,import_data_add_group,params$tab_txt)
filename
dati <- read_csv2(filename,show_col_types = FALSE)
dati
dati
filename
dati <- read_csv2("data/17062022_CR-10_Plate1_SingleData.xlsx")
library(httr)  # Per inviare richieste HTTP
library(readr) # Per leggere il CSV
library(MASS)  # Per glm.nb
library(jsonlite)  # Per convertire in JSON
download_and_load_csv <- function(api_url, token, save_path) {
response <- GET(
api_url,
add_headers(Authorization = paste("Bearer", token))
)
if (status_code(response) == 200) {
raw_data <- content(response, "raw")
writeBin(raw_data, save_path)
dataset <- read.csv(save_path, sep = ";")
return(dataset)
} else {
stop("Errore nella chiamata all'API: ", status_code(response))
}
}
###### questa forse va messa in qualche file utils? non fa altro che aggiungere gli asterischi sui p significativi
get_stars <- function(ps){
stars=rep("",length(ps))
stars[ps<=.05]=paste0(stars[ps<=.05],"*")
stars[ps<=.01]=paste0(stars[ps<=.01],"*")
stars[ps<=.001]=paste0(stars[ps<=.001],"*")
stars
}
##############
make_up_res <- function(ps){
ps=sprintf("%.4f", round(ps,4))
ps[ps<.001]="<0.001"
ps
}
run_glm_model <- function(dataset) {
dataset <- dataset[dataset$Group != "0:None",]
dataset$Cond <- factor(dataset$Condition)
dataset$Compound <- factor(dataset$Compound)
dataset$Grp <- dataset$Group
dataset$Cond <- relevel(dataset$Cond, 'Control:0')
dataset$Cond <- factor(dataset$Cond)
plates=unique(dataset$Plate)
nplates=length(plates)
model <- glm.nb(Counts ~ Plate + Cond * Grp, data = dataset)
model_summary <- summary(model)
print(round(as.data.frame(model_summary$coefficients)[,c(1,4)],4))
round(as.data.frame(model_summary$coefficients)[,c(4)],4)
res=lapply(plates, function(plt){
model <- glm.nb(Counts ~ Cond * Grp, data = dataset[dataset$Plate==plt,])
model_summary <- summary(model)
as.data.frame(model_summary$coefficients)[,c(1,2,3,4)]
})
res=as.data.frame(res)
#fisher_stat=rowSums(-2*log(res[,3*(1:nplates)]))
#fisher_ps=1-pchisq(fisher_stat,2*nplates)
liptak_stat=rowSums(res[,3*(1:nplates)-1,drop=FALSE])/sqrt(nplates)
liptak_ps=(1-pnorm(abs(liptak_stat)))*2
p.adj=p.adjust(liptak_ps,"holm")
mean_coeff=rowMeans(res[,3*(1:nplates)-21,drop=FALSE])
smry=data.frame(mean_coeff=mean_coeff,
Z.value=liptak_stat,
p.value=make_up_res(liptak_ps),
adj.p.value=make_up_res(p.adj),
get_stars(p.adj)
)
names(smry)[5]=""
print("Coefficients of the GLM model (Averaged over plates) and Liptak-Stouffer combinations of p-values:")
print(smry,digits=4)
coefficients=as.matrix(smry)
coefficients_json <- toJSON(split(coefficients, row(coefficients)))
return(coefficients_json)
}
ids <- c(307, 308, 309, 310)#cervello bovino# # fegato delfino: c(564, 565, 566, 567) #c(560, 561, 562, 563)
ids_string <- paste(ids, collapse = ";")
current_dir <- getwd()
save_path <- file.path(current_dir, "merged_data.csv")
api_url <- paste0("https://sentinel.bca.unipd.it/RemoteAnalysis/GetToxicityMergedDataSet/", ids_string)
token <- "livio.finos@unipd.it"
debug(download_and_load_csv)
dataset <- download_and_load_csv(api_url, token, save_path)
str(dataset)
save(file="dati_in_sentinel.Rdata",dataset)
source("functions.R")
source("functions.R")
library(ggplot2)
library(data.table)
library(ggplot2)
theme_set(theme_sjplot())
# library(lmerTest)
require("MASS")
require(multcomp)
D=data.frame(dataset)
D$Condition=apply(cbind(as.character(D$Compound),
as.character(D$Concentration)),
1,function(x) paste(x,collapse = ":"))
D$Cond=factor(D$Condition)
D$Compound=factor(D$Compound)
D$Grp=D$Group
D$Cond=relevel(D$Cond,"Control:0")
D$Cond=factor(D$Cond)
contrasts(D$Plate)<- contr.sum
D$Plate=factor(D$Plate)
contrasts(D$Plate)<- contr.sum
if(eval){
### FIXED EFFECT
mod= glm.nb(Counts~Plate+Cond*Grp,data=D)
ngrps=nlevels(D$Grp)
nconds=23#*ngrps
nplates=length(unique(D$Plate))
base=cbind(matrix(0,nconds,nplates),diag(nconds))
temp=rbind(
cbind(base,matrix(0,nconds,ngrps-1+nconds*5)), #gr=1
cbind(base,matrix(0,nconds,ngrps-1),diag(nconds),matrix(0,nconds,nconds*4)), #gr=2
cbind(base,matrix(0,nconds,ngrps-1+nconds),diag(nconds),matrix(0,nconds,nconds*3)),#gr=3
cbind(base,matrix(0,nconds,ngrps-1+nconds*2),diag(nconds),matrix(0,nconds,nconds*2)),#gr=4
cbind(base,matrix(0,nconds,ngrps-1+nconds*3),diag(nconds),matrix(0,nconds,nconds*1)),#gr=5
cbind(base,matrix(0,nconds,ngrps-1+nconds*4),diag(nconds),matrix(0,nconds,nconds*0)))#,
# cbind(matrix(0,nconds,ngrps+nconds*6),diag(nconds),matrix(0,nconds,nconds*0)))#gr=6
contr_mat=temp
rownames(contr_mat)=
names(coef(mod))[-c(1:nplates,(nconds+1:(ngrps-1))+nplates)]
rownames(contr_mat)[1:nconds]=paste0(rownames(contr_mat)[1:nconds],":Grp1:G0")
modc=glht(mod,contr_mat)
modc_mcp=summary(modc)
#############
M=rbind(
c(1,1,1,rep(0,20)),
c(rep(0,3),rep(1,5),rep(0,15)),
c(rep(0,8),rep(1,5),rep(0,10)),
c(rep(0,13),rep(1,5),rep(0,5)),
c(rep(0,18),rep(1,5))
)
riducente=  kronecker(diag(1, ngrps), M)
contr_mat0=riducente%*%contr_mat
rownames(contr_mat0)=paste(sep="_",rep(levels(D$Compound)[-1],6),rep(levels(D$Group),each=5))
modc0=glht(mod,contr_mat0)
modc0_mcp=summary(modc0)
save(mod,file="modelNbinom_fixed.Rdata",
modc,
modc_mcp,
modc0,
modc0_mcp)
} else load(file="modelNbinom_fixed.Rdata")
### FIXED EFFECT
mod= glm.nb(Counts~Plate+Cond*Grp,data=D)
ngrps=nlevels(D$Grp)
ngrps=nlevels(D$Grp)
nconds=23#*ngrps
nplates=length(unique(D$Plate))
base=cbind(matrix(0,nconds,nplates),diag(nconds))
temp=rbind(
cbind(base,matrix(0,nconds,ngrps-1+nconds*5)), #gr=1
cbind(base,matrix(0,nconds,ngrps-1),diag(nconds),matrix(0,nconds,nconds*4)), #gr=2
cbind(base,matrix(0,nconds,ngrps-1+nconds),diag(nconds),matrix(0,nconds,nconds*3)),#gr=3
cbind(base,matrix(0,nconds,ngrps-1+nconds*2),diag(nconds),matrix(0,nconds,nconds*2)),#gr=4
cbind(base,matrix(0,nconds,ngrps-1+nconds*3),diag(nconds),matrix(0,nconds,nconds*1)),#gr=5
cbind(base,matrix(0,nconds,ngrps-1+nconds*4),diag(nconds),matrix(0,nconds,nconds*0)))#,
base=cbind(matrix(0,nconds,nplates),diag(nconds))
matrix(0,nconds,ngrps-1+nconds*5)
temp=rbind(
cbind(base,matrix(0,nconds,ngrps-1+nconds*5)), #gr=1
cbind(base,matrix(0,nconds,ngrps-1),diag(nconds),matrix(0,nconds,nconds*4)), #gr=2
cbind(base,matrix(0,nconds,ngrps-1+nconds),diag(nconds),matrix(0,nconds,nconds*3)),#gr=3
cbind(base,matrix(0,nconds,ngrps-1+nconds*2),diag(nconds),matrix(0,nconds,nconds*2)),#gr=4
cbind(base,matrix(0,nconds,ngrps-1+nconds*3),diag(nconds),matrix(0,nconds,nconds*1)),#gr=5
cbind(base,matrix(0,nconds,ngrps-1+nconds*4),diag(nconds),matrix(0,nconds,nconds*0)))#,
ngrous
ngrps
D$Grp=factor(D$GRp)
D$Grp=factor(D$Grp)
contrasts(D$Plate)<- contr.sum
### FIXED EFFECT
mod= glm.nb(Counts~Plate+Cond*Grp,data=D)
ngrps=nlevels(D$Grp)
ngrps=nlevels(D$Grp)
nconds=23#*ngrps
nplates=length(unique(D$Plate))
base=cbind(matrix(0,nconds,nplates),diag(nconds))
temp=rbind(
cbind(base,matrix(0,nconds,ngrps-1+nconds*5)), #gr=1
cbind(base,matrix(0,nconds,ngrps-1),diag(nconds),matrix(0,nconds,nconds*4)), #gr=2
cbind(base,matrix(0,nconds,ngrps-1+nconds),diag(nconds),matrix(0,nconds,nconds*3)),#gr=3
cbind(base,matrix(0,nconds,ngrps-1+nconds*2),diag(nconds),matrix(0,nconds,nconds*2)),#gr=4
cbind(base,matrix(0,nconds,ngrps-1+nconds*3),diag(nconds),matrix(0,nconds,nconds*1)),#gr=5
cbind(base,matrix(0,nconds,ngrps-1+nconds*4),diag(nconds),matrix(0,nconds,nconds*0)))#,
contr_mat=temp
rownames(contr_mat)=
names(coef(mod))[-c(1:nplates,(nconds+1:(ngrps-1))+nplates)]
ngrps
nconds
nplates
rownames(contr_mat)[1:nconds]=paste0(rownames(contr_mat)[1:nconds],":Grp1:G0")
modc=glht(mod,contr_mat)
